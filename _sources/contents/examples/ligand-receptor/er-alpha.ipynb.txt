{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "37cca21d-9b42-46c0-ac48-6e77963b68ab",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ac0f17d1dd7d4913a43639cfd8620460",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import openpharmacophore as oph\n",
    "import pyunitwizard as puw\n",
    "\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11761ba0",
   "metadata": {},
   "source": [
    "# Er-alpha"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a23282b7",
   "metadata": {},
   "source": [
    "## Pharmacophore of the protein-ligand complex of estrogen receptor with estradiol."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "847b9a5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Protein has 2010 atoms\n",
      "['EST:B']\n"
     ]
    }
   ],
   "source": [
    "protein = oph.load(\"../data/er_alpha_A_chain.pdb\")\n",
    "print(f\"Protein has {protein.n_atoms} atoms\")\n",
    "\n",
    "# We know that the file contains a single ligand\n",
    "lig_ids = protein.ligand_ids()\n",
    "print(lig_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14231ff0",
   "metadata": {},
   "source": [
    "We obtain the smiles of the ligand. Necessary to fix its bond order later"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f568de6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C[C@]12CC[C@@H]3c4ccc(cc4CC[C@H]3[C@@H]1CC[C@@H]2O)O'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smiles = oph.smiles_from_pdb_id(lig_ids[0])\n",
    "smiles"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf358fdd",
   "metadata": {},
   "source": [
    "We extract the ligand and fix its bond order and add hydrogens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "51527b3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<rdkit.Chem.rdchem.Mol at 0x7f8fedbc1350>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ligand = protein.get_ligand(lig_ids[0])\n",
    "ligand.fix_bond_order(smiles=smiles)\n",
    "ligand.add_hydrogens()\n",
    "\n",
    "ligand.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "12a73cad-af5b-438d-b4d4-0eca6bd1bfe5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Has ligand: <bound method Protein.has_ligands of <openpharmacophore.molecular_systems.protein.Protein object at 0x7f8f845acf10>>\n"
     ]
    }
   ],
   "source": [
    "protein.remove_ligand(lig_ids[0])\n",
    "print(f\"Has ligand: {protein.has_ligands}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c500b78f",
   "metadata": {},
   "source": [
    "We add hydrogens to the protein"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "721acf29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Protein has 4039 atoms after adding hydrogens\n"
     ]
    }
   ],
   "source": [
    "protein.add_hydrogens()\n",
    "print(f\"Protein has {protein.n_atoms} atoms after adding hydrogens\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23a6f91b",
   "metadata": {},
   "source": [
    "We need to extract the binding site from the protein, so we can get pharmacophoric features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "80c947c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "bsite = oph.ComplexBindingSite(protein, ligand)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27204898",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Obtaining the pharmacophore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ddeabba8",
   "metadata": {},
   "outputs": [],
   "source": [
    "pharmacophore = oph.LigandReceptorPharmacophore(bsite, ligand)\n",
    "pharmacophore.extract()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3df24cd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of pharmacophoric points 3\n",
      "PharmacophoricPoint(feat_type=aromatic ring; center=(102.81, 16.72, 24.52); radius=1.0; direction=(0.09, 0.5, -0.86))\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(107.21, 12.57, 22.11); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(107.38, 12.45, 24.42); radius=1.0)\n"
     ]
    }
   ],
   "source": [
    "print(f\"Number of pharmacophoric points {len(pharmacophore[0])}\")\n",
    "for p in pharmacophore[0]:\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0684c5c7-22a9-42aa-82b3-a69f924e1de7",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "289f08fd1c0f4e058089ae68811232cd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viewer = oph.Viewer()\n",
    "viewer.add_components([protein, ligand, pharmacophore[0]])\n",
    "viewer.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d405f31-f7aa-4733-afdf-d514eaff3764",
   "metadata": {},
   "source": [
    "<img src=\"../../../_static/er_alpha.png\" alt=\"pharmacophore\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb46108-94b3-4b34-b4c1-c41ca5573f50",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "    <strong>Note:</strong>\n",
    "    <p>viewer.show() displays an interactive widget. For simplicity an image is presented in the documentation.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "73b8885a-fb61-4ab3-9052-b5cabe5135cf",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "# Save pharmacophore image so it can be viewed in the documentation\n",
    " \n",
    "import time\n",
    "import threading\n",
    "\n",
    "save = False\n",
    "\n",
    "def save_image(view):\n",
    "    im = view.render_image()\n",
    "    while not im.value:\n",
    "        time.sleep(0.1)\n",
    "    save_path = \"../../../_static/er_alpha.png\"\n",
    "    with open(save_path, \"wb\") as fp:\n",
    "        fp.write(im.value)    \n",
    "\n",
    "def generate_image():\n",
    "    thread = threading.Thread(target=save_image, args=(viewer.to_nglview(),), daemon=True)\n",
    "    thread.start()\n",
    "    \n",
    "\n",
    "if save:\n",
    "    generate_image()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "toc-autonumbering": false,
  "toc-showcode": true,
  "toc-showmarkdowntxt": true,
  "toc-showtags": true
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
