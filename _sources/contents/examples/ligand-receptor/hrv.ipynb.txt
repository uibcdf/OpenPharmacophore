{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "71dc4ae3-10f3-4aec-a832-f4f3ad05529c",
   "metadata": {},
   "source": [
    "# Human Rhinovirus Serotype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "154aaaf7-6016-444f-941a-9c40cbeff4c0",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e120af70f405439fb1e778f4761d4953",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import openpharmacophore as oph\n",
    "import pyunitwizard as puw\n",
    "from openpharmacophore.pharmacophore.align import align_pharmacophores"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95811473-3c4b-4c59-a168-da1e49857073",
   "metadata": {},
   "source": [
    "## Load and visualize protein-ligand complexes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "16642a52-46fc-4ced-8268-9dde981b0db2",
   "metadata": {},
   "outputs": [],
   "source": [
    "pdbs_path = \"../data/hrv/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "26357919-d7c0-4f51-8e0f-c738ee4bf61f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_proteins():\n",
    "    \n",
    "\n",
    "    prots = [\n",
    "        oph.load(os.path.join(pdbs_path, \"1c8m.pdb\")),\n",
    "        oph.load(os.path.join(pdbs_path, \"1ncr.pdb\")),\n",
    "        oph.load(os.path.join(pdbs_path, \"1nd3.pdb\")),\n",
    "    ]\n",
    "\n",
    "    print(prots[0].ligand_ids())\n",
    "    print(prots[1].ligand_ids())\n",
    "    print(prots[2].ligand_ids())\n",
    "    \n",
    "    return prots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0f0d0dbd-a361-4dff-bd16-b9220bbc0abd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['W11:E']\n",
      "['MYR:F', 'W11:E']\n",
      "['W11:E']\n"
     ]
    }
   ],
   "source": [
    "proteins = load_proteins()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6025b081-7fa0-400d-b6f2-dbb6ed906acd",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cd679912c31a44bc97b9b170b02a6524",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viewer = oph.Viewer()\n",
    "viewer.add_components(proteins)\n",
    "viewer.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8a6ab4bd-1988-4546-8529-e56036eb8afa",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"320vh\"\n",
       "            src=\"../../../_static/hrv_1.html\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x7f538c6a4150>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "viewer._show_html(\"../../../_static/hrv_1.html\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a56f977-2c5c-44fc-a86b-1db2608ab3ba",
   "metadata": {},
   "source": [
    "## Extracting ligands\n",
    "\n",
    "We extract the ligands with code W11 that corresponds to pleconaril."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ab3c3623-4acb-415d-906b-2fb068e48b44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Cc1cc(cc(c1OCCCc2cc(no2)C)C)c3nc(on3)C(F)(F)F'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lig_id = proteins[0].ligand_ids()[0]\n",
    "smiles = oph.smiles_from_pdb_id(lig_id)\n",
    "smiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5e32f747-064e-4040-8bb8-bfe185acf9dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def load_ligands():\n",
    "\n",
    "    lig_list = [p.get_ligand(lig_id) for p in proteins]\n",
    "    for lig in lig_list:\n",
    "        lig.fix_bond_order(smiles=smiles)\n",
    "        lig.add_hydrogens()\n",
    "        \n",
    "    return lig_list\n",
    "\n",
    "ligands = load_ligands()\n",
    "oph.draw_ligands(ligands, n_per_row=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcdad8e2-f07c-4006-8b3a-974ea61f4127",
   "metadata": {},
   "source": [
    "## Preparing proteins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9edd1417-bb28-4781-9bbf-35a8e7a2bfe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "for prot in proteins:\n",
    "    prot.extract_chain(\"A\")\n",
    "    prot.add_hydrogens()\n",
    "    assert not prot.has_ligands()\n",
    "    assert not prot.has_solvent_or_ions()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "94824754-cd2a-4f9a-97fc-cb4666bbbeb0",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "142558a3702b4352a102ad0f48ad60cc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viewer = oph.Viewer()\n",
    "viewer.add_components(proteins + ligands)\n",
    "viewer.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f1dc3f36-b793-484a-b142-07535e09b9c4",
   "metadata": {
    "tags": [
     "remove-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"320vh\"\n",
       "            src=\"../../../_static/hrv_2.html\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x7f5365054290>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "viewer._show_html(\"../../../_static/hrv_2.html\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d1dac0a-9769-4be9-a556-7bb981b77f7a",
   "metadata": {},
   "source": [
    "## Obtaining binding sites"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9979b41d-f737-4479-a8bb-7f8a23f1d7ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "binding_sites = []\n",
    "\n",
    "for ii in range(len(proteins)):\n",
    "    binding_sites.append(oph.ComplexBindingSite(proteins[ii], ligands[ii]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a22d169-bcc9-4830-961c-33fd55e34902",
   "metadata": {},
   "source": [
    "## Extracting pharmacophores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "96590d44-4f9f-438f-91a1-37eae9307991",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Pharmacophore 1\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(48.89, -4.4, 121.79); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(40.93, 3.43, 122.23); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(45.04, 3.15, 123.78); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(41.87, -0.79, 122.69); radius=1.0)\n",
      "\n",
      "Pharmacophore 2\n",
      "PharmacophoricPoint(feat_type=aromatic ring; center=(38.03, 4.36, 123.74); radius=1.0; direction=(-0.67, -0.05, -0.74))\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(49.65, -4.36, 122.0); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(41.14, 2.96, 122.61); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(45.46, 2.01, 123.42); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(41.37, -1.11, 122.68); radius=1.0)\n",
      "\n",
      "Pharmacophore 3\n",
      "PharmacophoricPoint(feat_type=aromatic ring; center=(37.82, 4.36, 123.82); radius=1.0; direction=(-0.64, -0.06, -0.77))\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(49.44, -4.36, 122.09); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(40.93, 2.96, 122.69); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(45.25, 2.0, 123.51); radius=1.0)\n",
      "PharmacophoricPoint(feat_type=hydrophobicity; center=(41.16, -1.11, 122.76); radius=1.0)\n"
     ]
    }
   ],
   "source": [
    "pharmacophores = []\n",
    "\n",
    "for ii in range(len(binding_sites)):\n",
    "    lrp = oph.LigandReceptorPharmacophore(binding_sites[ii], ligands[ii])\n",
    "    lrp.extract()\n",
    "    print(f\"\\nPharmacophore {ii + 1}\")\n",
    "    for pnt in lrp[0]:\n",
    "        print(pnt)\n",
    "        \n",
    "    pharmacophores.append(lrp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5b62f179-eec4-4fe8-9cec-6ac313b06016",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d560e18602b44cf1953089e287efe6bd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "idx = 2\n",
    "viewer = oph.Viewer()\n",
    "viewer.add_components([\n",
    "    proteins[idx],\n",
    "    ligands[idx],\n",
    "    pharmacophores[idx],\n",
    "])\n",
    "viewer.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afd65d6a-ec5c-43ad-a09b-0239fac9fad5",
   "metadata": {},
   "source": [
    "<img src=\"../../../_static/hrv_1.png\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78483e1f-2ae2-4423-b036-16470c1ca9bc",
   "metadata": {},
   "source": [
    "## Finding a common pharmacophore\n",
    "\n",
    "To find a common pharmacophore we align the pharmacophores with one another. We'll choose the one with lowest rmsd as the \n",
    "consensus pharmacophore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fc752990-b88e-40a9-8a89-56f1a11a12d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "pharma_mat = [\n",
    "    puw.get_value(p[0].to_matrix()) for p in pharmacophores\n",
    "]\n",
    "\n",
    "\n",
    "hydrophobics = [\n",
    "    pharma_mat[0], pharma_mat[1][1:, :], pharma_mat[2][1:, :]\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b3eb6c6-befc-40e4-9bbd-bbf4c5dd3ee1",
   "metadata": {},
   "source": [
    "Align hydrophobic features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "66003b22-c56f-45a3-8513-7d147731b493",
   "metadata": {},
   "outputs": [],
   "source": [
    "def align_and_score(matrices):\n",
    "    \n",
    "    rmsd_list = []\n",
    "    for ii in range(len(matrices)):\n",
    "        avg_rmsd = 0\n",
    "        for jj in range(len(matrices)):\n",
    "            if ii == jj:\n",
    "                continue\n",
    "            rmsd, _ = align_pharmacophores(matrices[ii], matrices[jj]) \n",
    "            avg_rmsd += rmsd \n",
    "            \n",
    "        avg_rmsd /= (len(matrices) - 1)\n",
    "        rmsd_list.append(avg_rmsd)\n",
    "    \n",
    "    return rmsd_list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d1e92a8c-da75-4920-a7ed-fcce551caa43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.671464357705515, 0.3367555679305882, 0.33734245356241305]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmsd_list = align_and_score(hydrophobics)\n",
    "rmsd_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fe47d6c-5367-4435-b5d9-a483fd7f9983",
   "metadata": {},
   "source": [
    "Taking the second pharmacophore as the alignment reference gives the lowest RMSD.\n",
    "So we take this as our common pharmacophore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6ea71bfc-4385-42fe-8a15-6332ce090c85",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5bc92c3de5da437c83e36adaca5900dc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viewer = oph.Viewer()\n",
    "viewer.add_components(ligands + [pharmacophores[2]])\n",
    "viewer.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42cbb86c-39bd-4de8-8a70-33fa29eb4bb4",
   "metadata": {},
   "source": [
    "<img src=\"../../../_static/hrv_2.png\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46fb3ad4-1f64-4670-9551-6404ac22dadb",
   "metadata": {},
   "source": [
    "Align hydrophobic features and aromatic ring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "608b5457-e06e-4c70-a0b3-0a21162785f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0025020000021948063, 0.0025020000021948063]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmsd_list = align_and_score(pharma_mat[1:])\n",
    "rmsd_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9a509653-7972-4a58-823e-2e1f3d9c7021",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "adabfa3ef296497490b391bded766108",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viewer = oph.Viewer()\n",
    "viewer.add_components(ligands + [pharmacophores[1]])\n",
    "viewer.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30e8394a-1673-4f06-b7d5-65ced4054994",
   "metadata": {},
   "source": [
    "<img src=\"../../../_static/hrv_3.png\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3e0b17bd-e437-43b9-b036-2b7aeced5c49",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "# Save pharmacophore image so it can be viewed in the documentation\n",
    " \n",
    "import time\n",
    "import threading\n",
    "\n",
    "save = False\n",
    "\n",
    "def save_image(view):\n",
    "    im = view.render_image()\n",
    "    while not im.value:\n",
    "        time.sleep(0.1)\n",
    "    save_path = \"../../../_static/hrv_3.png\"\n",
    "    with open(save_path, \"wb\") as fp:\n",
    "        fp.write(im.value)    \n",
    "\n",
    "def generate_image():\n",
    "    thread = threading.Thread(target=save_image, args=(viewer.to_nglview(),), daemon=True)\n",
    "    thread.start()\n",
    "    \n",
    "\n",
    "if save:\n",
    "    generate_image()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
