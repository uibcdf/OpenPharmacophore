{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6741d976-79df-4c53-81ff-14a709f740a8",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "56a159e188c9480b9bc72fcdc4bf6b50",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import openpharmacophore as oph"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2783658e-def4-4033-b84c-f446684d3550",
   "metadata": {},
   "source": [
    "# Aromatic interactions\n",
    "\n",
    "In this notebook we explore aromatic interactions between proteins and ligands "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4c372858-d7fd-4a1b-a88f-a55dcc9553f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "pdb_path = \"../../data/1xdn.pdb\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb86e581-22af-4832-b569-42728b5c1189",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Has hydrogens: False\n",
      "Has ligand: True\n"
     ]
    }
   ],
   "source": [
    "protein = oph.load(pdb_path)\n",
    "print(f\"Has hydrogens: {protein.has_hydrogens()}\")\n",
    "print(f\"Has ligand: {protein.has_ligands()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23cbfb77-4b17-44c6-8848-b8792d840ffb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ATP:B']\n"
     ]
    }
   ],
   "source": [
    "lig_ids = protein.ligand_ids()\n",
    "print(lig_ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "51c2f6a3-31eb-4300-9e71-3fe219475804",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'c1nc(c2c(n1)n(cn2)[C@H]3[C@@H]([C@@H]([C@H](O3)CO[P@@](=O)(O)O[P@](=O)(O)OP(=O)(O)O)O)O)N'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smiles = oph.smiles_from_pdb_id(lig_ids[0])\n",
    "smiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aa104613-8899-408f-b15c-14192b8d25e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[13:44:07] WARNING: More than one matching pattern found - picking one\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<rdkit.Chem.rdchem.Mol at 0x7f0c812f2b70>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ligand = protein.get_ligand(lig_ids[0])\n",
    "ligand.fix_bond_order(smiles=smiles)\n",
    "\n",
    "ligand.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2a82785a-cc39-42b1-a452-d484c290d067",
   "metadata": {},
   "outputs": [],
   "source": [
    "bsite = oph.ComplexBindingSite(protein, ligand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cd778ef2-c9a1-45ad-a783-5479bb58b684",
   "metadata": {},
   "outputs": [],
   "source": [
    "pharmacophore = oph.LigandReceptorPharmacophore(bsite, ligand)\n",
    "pharmacophore.extract(feat_types=[\"aromatic ring\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d4ca537b-402d-4fcc-8e8a-aeec9f5dbab8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of pharmacophoric points 1\n",
      "PharmacophoricPoint(feat_type=aromatic ring; center=(38.03, 23.02, 13.08); radius=1.0; direction=(0.14, 0.41, 0.9))\n"
     ]
    }
   ],
   "source": [
    "print(f\"Number of pharmacophoric points {len(pharmacophore[0])}\")\n",
    "for p in pharmacophore[0]:\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3ced192b-3a59-4f61-8c62-eb58fb623cfd",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e9d69b7d4f6b46349c2f66ea8fd454c8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viewer = oph.Viewer()\n",
    "viewer.add_components([bsite, ligand, pharmacophore[0]])\n",
    "viewer.set_protein_style(\"ball+stick\")\n",
    "viewer.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f70d9a4c-db2d-4989-a917-178d1025ec9c",
   "metadata": {},
   "source": [
    "<img src=\"../../../../_static/aromatic_interaction.png\" alt=\"pharmacophore\">\n",
    "<div class=\"alert alert-info\">\n",
    "    <strong>Note:</strong>\n",
    "    <p>viewer.show() displays an interactive widget. For simplicity an image is presented in the documentation.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1f598451-fa1d-49e3-b9b9-b7fbf029c34c",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "# Save view image so it can be viewed in the documentation\n",
    " \n",
    "import time\n",
    "import threading\n",
    "\n",
    "save = False\n",
    "\n",
    "def save_image(view):\n",
    "    im = view.render_image()\n",
    "    while not im.value:\n",
    "        time.sleep(0.1)\n",
    "    save_path = \"../../../../_static/aromatic_interaction.png\"\n",
    "    with open(save_path, \"wb\") as fp:\n",
    "        fp.write(im.value)    \n",
    "\n",
    "def generate_image():\n",
    "    thread = threading.Thread(target=save_image, args=(viewer.to_nglview(),), daemon=True)\n",
    "    thread.start()\n",
    "    \n",
    "\n",
    "if save:\n",
    "    generate_image()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
