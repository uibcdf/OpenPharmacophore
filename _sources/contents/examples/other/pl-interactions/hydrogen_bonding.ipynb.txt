{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5604ceac-6f7b-45d8-a7ef-3fd917809695",
   "metadata": {},
   "source": [
    "# Hydrogen bonding in protein-ligand complexes\n",
    "\n",
    "In this notebook we explore hydrogen bonding between ligands and proteins "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b7fc0b52-b132-4922-9000-818b7c80ab67",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1797bce219444aecb068947daf45690d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import openpharmacophore as oph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "079ccce3-1fd7-4a6d-8589-5d3ecd847373",
   "metadata": {},
   "outputs": [],
   "source": [
    "pdb_path = \"../../data/3bbh_A_chain.pdb\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "afc016b1-a1db-4405-b08e-6a8ede8fdc55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Has hydrogens: False\n",
      "Has ligand: True\n"
     ]
    }
   ],
   "source": [
    "protein = oph.load(pdb_path)\n",
    "print(f\"Has hydrogens: {protein.has_hydrogens()}\")\n",
    "print(f\"Has ligand: {protein.has_ligands()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8cd2108d-1a42-4bd7-8cc7-78666287150a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['SFG:B']\n"
     ]
    }
   ],
   "source": [
    "lig_ids = protein.ligand_ids()\n",
    "print(lig_ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3e50eb5a-383e-4e34-b0f8-2ae8c7bb5287",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'c1nc(c2c(n1)n(cn2)[C@H]3[C@@H]([C@@H]([C@H](O3)C[C@H](CC[C@@H](C(=O)O)N)N)O)O)N'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smiles = oph.smiles_from_pdb_id(lig_ids[0])\n",
    "smiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a9853605-c299-445a-aa32-b1a1202b5679",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[13:45:41] WARNING: More than one matching pattern found - picking one\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<rdkit.Chem.rdchem.Mol at 0x7fbe10bc42b0>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ligand = protein.get_ligand(lig_ids[0])\n",
    "ligand.fix_bond_order(smiles=smiles)\n",
    "ligand.add_hydrogens()\n",
    "\n",
    "ligand.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a3316359-edda-4daa-b98a-e2c29d21ed8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Has ligand: <bound method Protein.has_ligands of <openpharmacophore.molecular_systems.protein.Protein object at 0x7fbd9e23a8d0>>\n"
     ]
    }
   ],
   "source": [
    "protein.remove_ligand(lig_ids[0])\n",
    "print(f\"Has ligand: {protein.has_ligands}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4fa619dd-c7d6-46d7-b00d-90b9e89c030a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Protein has 3455 atoms after adding hydrogens\n"
     ]
    }
   ],
   "source": [
    "protein.add_hydrogens()\n",
    "print(f\"Protein has {protein.n_atoms} atoms after adding hydrogens\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "908b88f6-778f-4a32-b6b8-0524f92cd047",
   "metadata": {},
   "outputs": [],
   "source": [
    "bsite = oph.ComplexBindingSite(protein, ligand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b22c3b52-7333-4409-afe1-a9b143a7779d",
   "metadata": {},
   "outputs": [],
   "source": [
    "pharmacophore = oph.LigandReceptorPharmacophore(bsite, ligand)\n",
    "pharmacophore.extract(feat_types=[\"hb acceptor\", \"hb donor\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "08039e31-3085-40d7-b46f-7f80812d5067",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of pharmacophoric points 8\n",
      "PharmacophoricPoint(feat_type=hb donor; center=(23.26, 62.8, 23.11); radius=1.0; direction=(-0.95, -0.06, -0.32))\n",
      "PharmacophoricPoint(feat_type=hb donor; center=(28.92, 67.61, 28.62); radius=1.0; direction=(0.21, 0.7, 0.68))\n",
      "PharmacophoricPoint(feat_type=hb donor; center=(28.92, 67.61, 28.62); radius=1.0; direction=(-0.12, 0.76, -0.63))\n",
      "PharmacophoricPoint(feat_type=hb donor; center=(25.86, 60.01, 28.62); radius=1.0; direction=(0.18, 0.22, 0.96))\n",
      "PharmacophoricPoint(feat_type=hb acceptor; center=(24.39, 64.99, 28.68); radius=1.0; direction=(0.45, 0.13, 0.88))\n",
      "PharmacophoricPoint(feat_type=hb acceptor; center=(25.86, 60.01, 28.62); radius=1.0; direction=(-0.28, -0.86, -0.43))\n",
      "PharmacophoricPoint(feat_type=hb acceptor; center=(29.65, 65.6, 29.93); radius=1.0; direction=(0.79, -0.04, 0.61))\n",
      "PharmacophoricPoint(feat_type=hb acceptor; center=(27.07, 65.55, 26.9); radius=1.0; direction=(0.1, 0.57, -0.81))\n"
     ]
    }
   ],
   "source": [
    "print(f\"Number of pharmacophoric points {len(pharmacophore[0])}\")\n",
    "for p in pharmacophore[0]:\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6fef49f3-25f4-4069-b144-754cf8aceb3d",
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a6af378eb00949b1a3577401280bf6ea",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "viewer = oph.Viewer()\n",
    "viewer.add_components([bsite, ligand, pharmacophore[0]])\n",
    "view = viewer.show()\n",
    "viewer.set_protein_style(\"ball+stick\")\n",
    "view"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29228c79-05b5-492e-8a6f-60358f79fd4c",
   "metadata": {},
   "source": [
    "<img src=\"../../../../_static/hyd_bonds.png\" alt=\"pharmacophore\">\n",
    "<div class=\"alert alert-info\">\n",
    "    <strong>Note:</strong>\n",
    "    <p>viewer.show() displays an interactive widget. For simplicity an image is presented in the documentation.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c11f21bd-3bed-43f2-95c0-3436da8cf855",
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "# Save view image so it can be viewed in the documentation\n",
    " \n",
    "import time\n",
    "import threading\n",
    "\n",
    "save = False\n",
    "\n",
    "def save_image(view):\n",
    "    im = view.render_image()\n",
    "    while not im.value:\n",
    "        time.sleep(0.1)\n",
    "    save_path = \"../../../../_static/hyd_bonds.png\"\n",
    "    with open(save_path, \"wb\") as fp:\n",
    "        fp.write(im.value)    \n",
    "\n",
    "def generate_image():\n",
    "    thread = threading.Thread(target=save_image, args=(viewer.to_nglview(),), daemon=True)\n",
    "    thread.start()\n",
    "    \n",
    "\n",
    "if save:\n",
    "    generate_image()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
